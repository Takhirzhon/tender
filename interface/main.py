import streamlit as st
import json
import os
import pandas as pd
from datetime import datetime
import base64

# Set page config
st.set_page_config(
    page_title="ProZorro Tender Analyzer",
    page_icon="üìë",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for Ukrainian styling
st.markdown("""
<style>
    .stApp {
        background-color: #f0f2f6;
    }
    .st-emotion-cache-1v0mbdj {
        border: 2px solid #005bbb !important;
        border-radius: 10px;
    }
    .stButton>button {
        background-color: #005bbb !important;
        color: white !important;
        border-radius: 5px;
        font-weight: bold;
    }
    .stSelectbox>div>div>select {
        border-color: #005bbb !important;
    }
    .stFileUploader>div>div>div>div>div>div>div>div {
        border-color: #005bbb !important;
    }
    .stMarkdown h1, .stMarkdown h2, .stMarkdown h3 {
        color: #005bbb !important;
    }
    .footer {
        position: fixed;
        left: 0;
        bottom: 0;
        width: 100%;
        background-color: #ffd500;
        color: #005bbb;
        text-align: center;
        padding: 10px;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

# Ukrainian translations
UKR_TRANSLATIONS = {
    "app_title": "–ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –¢–µ–Ω–¥–µ—Ä—ñ–≤ ProZorro",
    "upload_header": "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–µ–Ω–¥–µ—Ä—É",
    "upload_description": "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ JSON-—Ñ–∞–π–ª —Ç–µ–Ω–¥–µ—Ä—É –∑ —Å–∏—Å—Ç–µ–º–∏ ProZorro",
    "sample_tender": "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑—Ä–∞–∑–æ–∫ —Ç–µ–Ω–¥–µ—Ä—É",
    "analyze_btn": "–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¢–µ–Ω–¥–µ—Ä",
    "tender_details": "–î–µ—Ç–∞–ª—ñ –¢–µ–Ω–¥–µ—Ä—É",
    "tender_id": "ID —Ç–µ–Ω–¥–µ—Ä—É",
    "tender_title": "–ù–∞–∑–≤–∞ —Ç–µ–Ω–¥–µ—Ä—É",
    "description": "–û–ø–∏—Å",
    "status": "–°—Ç–∞—Ç—É—Å",
    "procuring_entity": "–ó–∞–º–æ–≤–Ω–∏–∫",
    "value": "–í–∞—Ä—Ç—ñ—Å—Ç—å",
    "currency": "–≥—Ä–Ω",
    "tender_period": "–ü–µ—Ä—ñ–æ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–Ω–¥–µ—Ä—É",
    "enquiry_period": "–ü–µ—Ä—ñ–æ–¥ –∑–∞–ø–∏—Ç—ñ–≤",
    "items": "–ü—Ä–µ–¥–º–µ—Ç–∏ –∑–∞–∫—É–ø—ñ–≤–ª—ñ",
    "item_description": "–û–ø–∏—Å",
    "quantity": "–ö—ñ–ª—å–∫—ñ—Å—Ç—å",
    "unit": "–û–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—É",
    "classification": "–ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è",
    "delivery_address": "–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏",
    "delivery_date": "–°—Ç—Ä–æ–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏",
    "raw_data": "–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ –¥–∞–Ω—ñ",
    "download_report": "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–≤—ñ—Ç",
    "footer_text": "–†–æ–∑—Ä–æ–±–ª–µ–Ω–æ –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø—Ä–æ–∑–æ—Ä–∏—Ö –∑–∞–∫—É–ø—ñ–≤–µ–ª—å –≤ –£–∫—Ä–∞—ó–Ω—ñ | –í–µ—Ä—Å—ñ—è 1.0",
    "no_file": "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª —Ç–µ–Ω–¥–µ—Ä—É",
    "file_error": "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç.",
    "tender_id_missing": "ID —Ç–µ–Ω–¥–µ—Ä—É –≤—ñ–¥—Å—É—Ç–Ω—ñ–π",
    "title_missing": "–ù–∞–∑–≤–∞ —Ç–µ–Ω–¥–µ—Ä—É –≤—ñ–¥—Å—É—Ç–Ω—è",
    "description_missing": "–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π",
    "statuses": {
        "active.enquiries": "–ü—Ä–∏–π–æ–º –∑–∞–ø–∏—Ç–∞–Ω—å",
        "active.tendering": "–ü—Ä–∏–π–æ–º –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π",
        "active.auction": "–ê—É–∫—Ü—ñ–æ–Ω",
        "active.qualification": "–ö–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è",
        "active.awarded": "–û–≥–æ–ª–æ—à–µ–Ω–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è",
        "complete": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
        "cancelled": "–°–∫–∞—Å–æ–≤–∞–Ω–æ",
        "unsuccessful": "–ù–µ –≤—ñ–¥–±—É–≤—Å—è"
    }
}

# Sample tender data
SAMPLE_TENDER = {
    "id": "UA-2025-07-123456",
    "title": "–†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —à–∫–æ–ª–∏ —É –ö–∏—î–≤—ñ",
    "description": "–ü–æ–≤–Ω–∞ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –±—É–¥—ñ–≤–ª—ñ —à–∫–æ–ª–∏ –∑ –∑–∞–º—ñ–Ω–æ—é –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π —Ç–∞ –æ—Å–Ω–∞—â–µ–Ω–Ω—è–º —Å—É—á–∞—Å–Ω–∏–º –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è–º",
    "status": "active.tendering",
    "procuringEntity": {
        "name": "–ö–∏—ó–≤—Å—å–∫–∞ –º—ñ—Å—å–∫–∞ —Ä–∞–¥–∞",
        "address": {
            "streetAddress": "–•—Ä–µ—â–∞—Ç–∏–∫, 36",
            "locality": "–ö–∏—ó–≤",
            "region": "–º.–ö–∏—ó–≤"
        }
    },
    "value": {
        "amount": 5200000,
        "currency": "UAH"
    },
    "tenderPeriod": {
        "startDate": "2025-07-01T10:00:00+03:00",
        "endDate": "2025-08-15T17:00:00+03:00"
    },
    "enquiryPeriod": {
        "startDate": "2025-07-01T10:00:00+03:00",
        "endDate": "2025-07-30T17:00:00+03:00"
    },
    "items": [
        {
            "description": "–ë–µ—Ç–æ–Ω–Ω—ñ —Ä–æ–±–æ—Ç–∏",
            "quantity": 120,
            "unit": {
                "name": "–∫—É–±.–º"
            },
            "classification": {
                "scheme": "–î–ö021",
                "id": "45210000-2",
                "description": "–ë—É–¥—ñ–≤–µ–ª—å–Ω—ñ —Ä–æ–±–æ—Ç–∏"
            },
            "deliveryAddress": {
                "streetAddress": "–≤—É–ª. –®–∫—ñ–ª—å–Ω–∞, 5",
                "locality": "–ö–∏—ó–≤",
                "region": "–º.–ö–∏—ó–≤"
            },
            "deliveryDate": {
                "startDate": "2025-09-01",
                "endDate": "2026-05-31"
            }
        },
        {
            "description": "–ï–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω—ñ —Ä–æ–±–æ—Ç–∏",
            "quantity": 350,
            "unit": {
                "name": "–∫–≤.–º"
            },
            "classification": {
                "scheme": "–î–ö021",
                "id": "45310000-1",
                "description": "–ï–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω—ñ —Ä–æ–±–æ—Ç–∏"
            },
            "deliveryAddress": {
                "streetAddress": "–≤—É–ª. –®–∫—ñ–ª—å–Ω–∞, 5",
                "locality": "–ö–∏—ó–≤",
                "region": "–º.–ö–∏—ó–≤"
            },
            "deliveryDate": {
                "startDate": "2025-09-01",
                "endDate": "2026-05-31"
            }
        }
    ]
}

def format_date(date_str):
    """Format ISO date to Ukrainian format"""
    try:
        dt = datetime.fromisoformat(date_str.replace("Z", "+00:00"))
        return dt.strftime("%d.%m.%Y %H:%M")
    except:
        return date_str

def parse_tender_data(tender_json):
    """Parse and structure tender data"""
    try:
        data = {
            "id": tender_json.get("id", UKR_TRANSLATIONS["tender_id_missing"]),
            "title": tender_json.get("title", UKR_TRANSLATIONS["title_missing"]),
            "description": tender_json.get("description", UKR_TRANSLATIONS["description_missing"]),
            "status": UKR_TRANSLATIONS["statuses"].get(
                tender_json.get("status", ""), 
                tender_json.get("status", "–ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞—Ç—É—Å")
            ),
            "procuring_entity": tender_json.get("procuringEntity", {}).get("name", "–ù–µ–≤—ñ–¥–æ–º–æ"),
            "value": tender_json.get("value", {}).get("amount", 0),
            "currency": tender_json.get("value", {}).get("currency", "UAH"),
            "tender_start": format_date(tender_json.get("tenderPeriod", {}).get("startDate", "")),
            "tender_end": format_date(tender_json.get("tenderPeriod", {}).get("endDate", "")),
            "enquiry_start": format_date(tender_json.get("enquiryPeriod", {}).get("startDate", "")),
            "enquiry_end": format_date(tender_json.get("enquiryPeriod", {}).get("endDate", "")),
            "items": []
        }
        
        # Process items
        for item in tender_json.get("items", []):
            data["items"].append({
                "description": item.get("description", "–ë–µ–∑ –æ–ø–∏—Å—É"),
                "quantity": item.get("quantity", 1),
                "unit": item.get("unit", {}).get("name", "—à—Ç."),
                "classification": item.get("classification", {}).get("description", "–ù–µ –∫–ª–∞—Å–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ"),
                "delivery_address": item.get("deliveryAddress", {}).get("streetAddress", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
                "delivery_date_start": format_date(item.get("deliveryDate", {}).get("startDate", "")),
                "delivery_date_end": format_date(item.get("deliveryDate", {}).get("endDate", ""))
            })
            
        return data
    except Exception as e:
        st.error(f"{UKR_TRANSLATIONS['file_error']}: {str(e)}")
        return None

def create_download_link(data, filename):
    """Generate download link for files"""
    if filename.endswith('.json'):
        json_str = json.dumps(data, ensure_ascii=False, indent=2)
        b64 = base64.b64encode(json_str.encode('utf-8')).decode()
    elif filename.endswith('.csv'):
        if isinstance(data, list):
            df = pd.DataFrame(data)
            csv = df.to_csv(index=False, encoding='utf-8-sig')
            b64 = base64.b64encode(csv.encode('utf-8-sig')).decode()
        else:
            return None
    else:
        return None
        
    return f'<a href="data:file/{filename.split(".")[-1]};base64,{b64}" download="{filename}">–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ {filename}</a>'

# Main app
st.title(f"üìë {UKR_TRANSLATIONS['app_title']}")
st.markdown("---")

# Sidebar for file upload
with st.sidebar:
    st.header(f"üì§ {UKR_TRANSLATIONS['upload_header']}")
    st.caption(UKR_TRANSLATIONS["upload_description"])
    
    uploaded_file = st.file_uploader(
        label="–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª —Ç–µ–Ω–¥–µ—Ä—É (JSON)",
        type=["json"],
        accept_multiple_files=False
    )
    
    if st.button(UKR_TRANSLATIONS["sample_tender"]):
        uploaded_file = None
        tender_data = SAMPLE_TENDER
        st.session_state.tender_data = tender_data
        st.success("–ó—Ä–∞–∑–æ–∫ —Ç–µ–Ω–¥–µ—Ä—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
    
    st.markdown("---")
    st.caption("–†–æ–∑—Ä–æ–±–ª–µ–Ω–æ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º:")
    st.image("https://prozorro.gov.ua/static/img/logo.svg", width=150)
    st.caption("–î–∞–Ω—ñ –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–≥–æ API ProZorro")

# Main content
if uploaded_file is not None:
    try:
        tender_data = json.load(uploaded_file)
        st.session_state.tender_data = tender_data
    except:
        st.error(UKR_TRANSLATIONS["file_error"])

if 'tender_data' in st.session_state:
    tender = parse_tender_data(st.session_state.tender_data)
    
    if tender:
        st.header(f"‚ÑπÔ∏è {UKR_TRANSLATIONS['tender_details']}")
        
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.subheader("–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
            st.info(f"**{UKR_TRANSLATIONS['tender_id']}:** {tender['id']}")
            st.info(f"**{UKR_TRANSLATIONS['tender_title']}:** {tender['title']}")
            st.info(f"**{UKR_TRANSLATIONS['status']}:** {tender['status']}")
            st.info(f"**{UKR_TRANSLATIONS['procuring_entity']}:** {tender['procuring_entity']}")
            st.info(f"**{UKR_TRANSLATIONS['value']}:** {tender['value']:,} {tender['currency']}")
            
        with col2:
            st.subheader("–î–∞—Ç–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è")
            st.info(f"**–ü–æ—á–∞—Ç–æ–∫ —Ç–µ–Ω–¥–µ—Ä—É:** {tender['tender_start']}")
            st.info(f"**–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ç–µ–Ω–¥–µ—Ä—É:** {tender['tender_end']}")
            st.info(f"**–ü–µ—Ä—ñ–æ–¥ –∑–∞–ø–∏—Ç—ñ–≤ (–ø–æ—á–∞—Ç–æ–∫):** {tender['enquiry_start']}")
            st.info(f"**–ü–µ—Ä—ñ–æ–¥ –∑–∞–ø–∏—Ç—ñ–≤ (–∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è):** {tender['enquiry_end']}")
        
        st.subheader(f"üì¶ {UKR_TRANSLATIONS['items']}")
        
        if tender['items']:
            items_df = pd.DataFrame(tender['items'])
            st.dataframe(items_df, use_container_width=True)
        else:
            st.warning("–ü—Ä–µ–¥–º–µ—Ç–∏ –∑–∞–∫—É–ø—ñ–≤–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
        
        st.subheader("üìù –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó")
        tab1, tab2 = st.tabs(["–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ –¥–∞–Ω—ñ", "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–≤—ñ—Ç"])
        
        with tab1:
            st.subheader(UKR_TRANSLATIONS["raw_data"])
            st.json(st.session_state.tender_data, expanded=False)
            
        with tab2:
            st.subheader(UKR_TRANSLATIONS["download_report"])
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("–ó–±–µ—Ä–µ–≥—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON"):
                    download_link = create_download_link(
                        st.session_state.tender_data, 
                        f"tender_{tender['id']}.json"
                    )
                    st.markdown(download_link, unsafe_allow_html=True)
                    
            with col2:
                if st.button("–ó–±–µ—Ä–µ–≥—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ CSV"):
                    if tender['items']:
                        download_link = create_download_link(
                            tender['items'], 
                            f"tender_items_{tender['id']}.csv"
                        )
                        if download_link:
                            st.markdown(download_link, unsafe_allow_html=True)
                        else:
                            st.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ CSV-—Ñ–∞–π–ª—É")
                    else:
                        st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ CSV")

# Footer
st.markdown("---")
st.markdown(f'<div class="footer">{UKR_TRANSLATIONS["footer_text"]}</div>', unsafe_allow_html=True)